<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.1.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
    http://www.springframework.org/schema/mvc   
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.1.xsd">


	<import resource="classpath:share-core.xml" />
	<import resource="classpath:share-soa.xml" />
	
	<!-- 数据格式转换器 -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="com.share.test.http.server.ProtocolConverter" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="com.share.test.http.server.ShareHttpMessageConverter" />
			</list>
		</property>
	</bean>
	
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="jdbc:mysql://localhost/mysql?autoReconnect=true" />
		<property name="username" value="root" />
		<property name="password" value="root" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="5" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!-- 启动redis -->
	<bean class="com.share.core.redis.Redis" init-method="init" destroy-method="close"></bean>
	
	<!-- 启动ssdb -->
	<bean class="com.share.core.ssdb.SSDB" init-method="init" destroy-method="close"></bean>

	<!-- 启动Mongodb -->
	<bean class="com.share.core.mongo.Mongodb" init-method="init" destroy-method="close"></bean>
	
	<!-- 启动thrift socket客户端 -->
	<bean class="com.share.soa.thrift.client.ThriftSocketClient" init-method="init" destroy-method="close">
		<!-- 服务器地址 -->
		<property name="host" value="127.0.0.1" />
		<!-- 服务器端口 -->
		<property name="port" value="9394" />
		<!-- 数据传输协议 -->
		<property name="tProtocol" value="org.apache.thrift.protocol.TCompactProtocol" />
		<!-- 要处理的接口 -->
		<property name="tServiceClient" value="com.share.soa.thrift.protocol.ShareObjectService.Client" />
	</bean>
	
	<!-- 自动加载配置 -->
	<bean class="com.share.core.annotation.processor.ConfigProcessor" init-method="init">
		<!-- 定义要扫描的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.core.data.config" />
		<!-- 定义要扫描的注解类名 -->
		<property name="annotationClass" value="com.share.core.annotation.Config" />
	</bean>
	
	<!-- 反射pojo类 -->
	<bean class="com.share.core.annotation.processor.PojoProcessor" init-method="init">
		<!-- 定义要扫描的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.core.data.data" />
		<!-- 定义要扫描的注解类名 -->
		<property name="annotationClass" value="com.share.core.annotation.Pojo" />
	</bean>
	
	<!-- 匹配socket协议号 -->
	<bean class="com.share.core.annotation.processor.SocketHandlerProcessor" init-method="init">
		<!-- 定义要扫描的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.test.socket.handler" />
		<!-- 定义要扫描的注解类名 -->
		<property name="annotationClass" value="com.share.core.annotation.SocketHandler" />
	</bean>
	
	<!-- 反射协议 -->
	<bean class="com.share.core.annotation.processor.ProtocolProcessor" init-method="init">
		<!-- 定义要扫描的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.test.protocol" />
		<!-- 定义要扫描的注解类名 -->
		<property name="annotationClass" value="com.share.core.annotation.Protocol" />
	</bean>
	
	<!-- 后台菜单扫描(这个不需要定义扫描的包了) -->
	<bean class="com.share.core.annotation.processor.MenuProcessor" init-method="init">
		<!-- 定义要扫描的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.test.http.server" />
		<!-- 定义要扫描的注解类名 -->
		<property name="annotationClass" value="com.share.core.annotation.Menu" />
	</bean>
	
	<!-- 线程池 -->
	<bean class="com.share.core.threadPool.DefaultThreadPool" init-method="init" destroy-method="close">
		<!-- 线程池名字 -->
		<!-- <property name="name" value="testThreadPool" /> -->
		<!-- 线程池大小 -->
		<property name="poolSize" value="10" />
	</bean>

	<!-- http客户端 -->
	<bean class="com.share.core.client.HttpClient" init-method="init" destroy-method="close">
		<!-- 超时时间，单位毫秒 -->
		<property name="connectTimeout" value="5000" />
	</bean>
	
	<!-- nsq -->
	<bean class="com.share.core.nsq.NsqService" init-method="init">
		<!-- 定义扫描存在NsqCallback的包，可用逗号分割 -->
		<property name="scanPackage" value="com.share.test.nsq" />
		<!-- 线程池大小 -->
		<property name="poolSize" value="1" />
	</bean>
	
	<!-- 视图配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/default/" /><!-- 这里定义皮肤的名字 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 定时器配置 -->
	<task:annotation-driven executor="shareExecutor" scheduler="shareScheduler" />
	<task:executor id="shareExecutor" pool-size="2" />
	<task:scheduler id="shareScheduler" pool-size="2" />
</beans>